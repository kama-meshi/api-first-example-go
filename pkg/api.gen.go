
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Todo defines model for Todo.
type Todo struct {
	Completed   *bool     `json:"completed,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
	Description *string   `json:"description,omitempty"`
	Id          int       `json:"id"`
	Title       string    `json:"title"`
}

// TodoInput defines model for TodoInput.
type TodoInput struct {
	Completed   *bool   `json:"completed,omitempty"`
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
}

// PostTodosJSONRequestBody defines body for PostTodos for application/json ContentType.
type PostTodosJSONRequestBody = TodoInput

// PutTodosTodoIdJSONRequestBody defines body for PutTodosTodoId for application/json ContentType.
type PutTodosTodoIdJSONRequestBody = TodoInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all TODO items
	// (GET /todos)
	GetTodos(ctx echo.Context) error
	// Create a new TODO item
	// (POST /todos)
	PostTodos(ctx echo.Context) error
	// Delete a TODO item
	// (DELETE /todos/{todoId})
	DeleteTodosTodoId(ctx echo.Context, todoId int) error
	// Get a specific TODO item
	// (GET /todos/{todoId})
	GetTodosTodoId(ctx echo.Context, todoId int) error
	// Update a TODO item
	// (PUT /todos/{todoId})
	PutTodosTodoId(ctx echo.Context, todoId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodos(ctx)
	return err
}

// PostTodos converts echo context to params.
func (w *ServerInterfaceWrapper) PostTodos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTodos(ctx)
	return err
}

// DeleteTodosTodoId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTodosTodoId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId int

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", ctx.Param("todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTodosTodoId(ctx, todoId)
	return err
}

// GetTodosTodoId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodosTodoId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId int

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", ctx.Param("todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodosTodoId(ctx, todoId)
	return err
}

// PutTodosTodoId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTodosTodoId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "todoId" -------------
	var todoId int

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", ctx.Param("todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter todoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTodosTodoId(ctx, todoId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos", wrapper.GetTodos)
	router.POST(baseURL+"/todos", wrapper.PostTodos)
	router.DELETE(baseURL+"/todos/:todoId", wrapper.DeleteTodosTodoId)
	router.GET(baseURL+"/todos/:todoId", wrapper.GetTodosTodoId)
	router.PUT(baseURL+"/todos/:todoId", wrapper.PutTodosTodoId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SVy27bOhCGX4WYc5aspDRZcZc2QGCgQAI0XQVZMNLIYSBeQo7SGobevSDpi2QZvddd",
	"iaZ/Dv/5OEOuobbaWYOGAog1hPoJtUzDO9vY+JVdd9OCuF/D/x5bEPBfuV9TbhaUUb0wricY+Bqctw49",
	"KUyRao+SsLmk+KO1XksCAY0kfENKI3CglUMQEMgrs4SBg2qidjOtDOESPQwDB48vvfLYgLiPIj4K/rCL",
	"Yx+fsSYYHgYOe2Ni5stq1yHheK9HazuUJnpoMNReOVLWjAR7j6SowyP/HLjMsrm5qFOmTYwnW8ElCyo6",
	"Y5e3C0aWaWnkEtndzdUNU4Q6wG5zSJMfVKAoBg6v6EOOclZURRV9WodGOgUCzouqOAcOTtJTIlCSbWwa",
	"LTEBinhktLFoQMA10l0SxIyCsyZkcG+rKvMzhCatk851qk4ry+eQgeXSiKNsWny/ghLWjEl6L1eZ0pTO",
	"x76uMYS279jWVGIeeq2lX4GAhEN23ZjYwMHZcCTHWxtGSb70GOidbVY/ld8PNsa0Msj3OMzAnv3RjY/x",
	"e58b5oBZnmWSGfy855ZEuUjKdfwsmiHXa+ybOcyrNJ9wprybVGxeaiT0IV0iKnqIBQgcjNTxqGkrncLh",
	"o0RnN8HDjNzFvJFGpZIcx9mBw8Ux7S5nZiyx1vbmEFFOjskxHv7txjk5hOqvl8/R9vtlptdITLLgsFat",
	"qqdkN3f2Qbv2pyP7zy+Dk55m7+KL/Btn+SkFmPZHUqB/3R5P7zsQ8ETkgihL6VSBX2R864ra6vL1LL7Z",
	"XwMAAP//W8yJP5QIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
